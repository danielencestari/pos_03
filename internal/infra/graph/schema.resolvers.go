package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/danielencestari/pos_03/internal/infra/graph/model"
	"github.com/danielencestari/pos_03/internal/usecase"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input *model.OrderInput) (*model.Order, error) {
	dto := usecase.OrderInputDTO{
		ID:    input.ID,
		Price: float64(input.Price),
		Tax:   float64(input.Tax),
	}
	output, err := r.CreateOrderUseCase.Execute(dto)
	if err != nil {
		return nil, err
	}
	return &model.Order{
		ID:         output.ID,
		Price:      float64(output.Price),
		Tax:        float64(output.Tax),
		FinalPrice: float64(output.FinalPrice),
	}, nil
}

// ListOrders is the resolver for the listOrders field.
// Implementa a query GraphQL para listagem de orders
func (r *queryResolver) ListOrders(ctx context.Context, page *int, limit *int, sort *string) (*model.OrderList, error) {
	// 1. Define valores padrão para parâmetros opcionais
	p := 1
	if page != nil {
		p = *page
	}

	l := 10
	if limit != nil {
		l = *limit
	}

	s := "id"
	if sort != nil {
		s = *sort
	}

	// 2. Monta o DTO de entrada
	dto := usecase.ListOrdersInputDTO{
		Page:  p,
		Limit: l,
		Sort:  s,
	}

	// 3. Executa o use case
	output, err := r.ListOrdersUseCase.Execute(dto)
	if err != nil {
		return nil, err
	}

	// 4. Converte DTO para modelo GraphQL
	var orders []*model.Order
	for _, order := range output.Orders {
		graphqlOrder := &model.Order{
			ID:         order.ID,
			Price:      float64(order.Price),
			Tax:        float64(order.Tax),
			FinalPrice: float64(order.FinalPrice),
		}
		orders = append(orders, graphqlOrder)
	}

	// 5. Retorna modelo GraphQL com metadados de paginação
	return &model.OrderList{
		Orders:     orders,
		Page:       output.Page,
		Limit:      output.Limit,
		Total:      output.Total,
		TotalPages: output.TotalPages,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
